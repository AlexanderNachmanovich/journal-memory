const path = require("path");
const fs = require("fs");
const { app } = require("electron");
const Database = require("better-sqlite3");

// üìå –ü–∞–ø–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–≤ –Ω–µ–π –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å –±–∞–∑—É)
const userDataPath = app.getPath("userData");
const targetDb = path.join(userDataPath, "journal-memory.db");

// üìå –ò—Å—Ö–æ–¥–Ω–∞—è –±–∞–∑–∞ (–ª–µ–∂–∏—Ç –≤ resources –ø—Ä–∏ —É–ø–∞–∫–æ–≤–∫–µ)
const sourceDb = path.join(process.resourcesPath, "journal-memory.db");

// –ï—Å–ª–∏ –±–∞–∑—ã –µ—â—ë –Ω–µ—Ç –≤ userData ‚Üí –∫–æ–ø–∏—Ä—É–µ–º –∏–∑ —Ä–µ—Å—É—Ä—Å–æ–≤
if (!fs.existsSync(targetDb)) {
  try {
    fs.copyFileSync(sourceDb, targetDb);
    console.log("–ë–∞–∑–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤:", targetDb);
  } catch (e) {
    console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É:", e);
  }
}

// –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –≤ userData
const db = new Database(targetDb);

// 1) –ë–∞–∑–æ–≤–∞—è —Å—Ö–µ–º–∞ (—Å –Ω–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–æ–π birthDate)
db.prepare(`
  CREATE TABLE IF NOT EXISTS persons (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    birthDate TEXT,      -- —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
    region TEXT,
    biography TEXT,
    photoPath TEXT
  )
`).run();

// 2) –ú–∏–≥—Ä–∞—Ü–∏—è: –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∞ —Ä–∞–Ω—å—à–µ –±–µ–∑ birthDate ‚Äî –¥–æ–±–∞–≤–∏–º –∫–æ–ª–æ–Ω–∫—É
const columns = db.prepare(`PRAGMA table_info(persons)`).all();
const hasBirthDate = columns.some(c => c.name === "birthDate");
const hasBirthYear = columns.some(c => c.name === "birthYear");

if (!hasBirthDate) {
  db.prepare(`ALTER TABLE persons ADD COLUMN birthDate TEXT`).run();
}

// 3) –ï—Å–ª–∏ –µ—Å—Ç—å legacy-–∫–æ–ª–æ–Ω–∫–∞ birthYear ‚Äî —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –µ—ë –≤ YYYY-01-01
if (hasBirthYear) {
  db.prepare(`
    UPDATE persons
    SET birthDate = CASE
      WHEN birthYear IS NOT NULL AND TRIM(birthYear) <> ''
      THEN printf('%04d-01-01', CAST(birthYear AS INTEGER))
      ELSE birthDate
    END
    WHERE birthDate IS NULL OR TRIM(birthDate) = ''
  `).run();

  // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –≤ SQLite = –ø–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã, —ç—Ç–æ –¥–æ–ª–≥–æ.
  // –ú—ã –æ—Å—Ç–∞–≤–ª—è–µ–º birthYear –∫–∞–∫ "–º—ë—Ä—Ç–≤—É—é" –∫–æ–ª–æ–Ω–∫—É, –Ω–æ –∫–æ–¥ –µ—ë –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç.
}

module.exports = db;
