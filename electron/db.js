const path = require("path");
const fs = require("fs");
const os = require("os");
const Database = require("better-sqlite3");

// üìå –ü—É—Ç—å –∫ —Ä–∞–±–æ—á–µ–º—É —Å—Ç–æ–ª—É
const desktopPath = path.join(os.homedir(), "Desktop");

// üìå –ü—É—Ç–∏ –∫ –±–∞–∑–µ –∏ –ø–∞–ø–∫–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
const targetDb = path.join(desktopPath, "journal-memory.db");
const photosDir = path.join(desktopPath, "journal-photos");

// üìå –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if (!fs.existsSync(photosDir)) {
  fs.mkdirSync(photosDir, { recursive: true });
  console.log("–ü–∞–ø–∫–∞ –¥–ª—è —Ñ–æ—Ç–æ —Å–æ–∑–¥–∞–Ω–∞:", photosDir);
}

// üìå –ï—Å–ª–∏ –±–∞–∑—ã –µ—â—ë –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç—É—é
if (!fs.existsSync(targetDb)) {
  try {
    const db = new Database(targetDb);
    db.prepare(`
      CREATE TABLE IF NOT EXISTS persons (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        birthDate TEXT,      -- —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
        region TEXT,
        biography TEXT,
        photoPath TEXT
      )
    `).run();

    db.prepare(`
      CREATE TABLE IF NOT EXISTS conflicts (
        region TEXT PRIMARY KEY,
        text   TEXT
      )
    `).run();

    db.close();
    console.log("–ù–æ–≤–∞—è –±–∞–∑–∞ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ:", targetDb);
  } catch (e) {
    console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–∞–∑—É:", e);
  }
}

// üìå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ
const db = new Database(targetDb);

// 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã persons
db.prepare(`
  CREATE TABLE IF NOT EXISTS persons (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    birthDate TEXT,
    region TEXT,
    biography TEXT,
    photoPath TEXT
  )
`).run();

// 2) –ú–∏–≥—Ä–∞—Ü–∏—è birthDate (–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –æ—Å—Ç–∞–ª—Å—è —Å—Ç–∞—Ä—ã–π birthYear)
const columns = db.prepare(`PRAGMA table_info(persons)`).all();
const hasBirthDate = columns.some(c => c.name === "birthDate");
const hasBirthYear = columns.some(c => c.name === "birthYear");

if (!hasBirthDate) {
  db.prepare(`ALTER TABLE persons ADD COLUMN birthDate TEXT`).run();
}

if (hasBirthYear) {
  db.prepare(`
    UPDATE persons
    SET birthDate = CASE
      WHEN birthYear IS NOT NULL AND TRIM(birthYear) <> ''
      THEN printf('%04d-01-01', CAST(birthYear AS INTEGER))
      ELSE birthDate
    END
    WHERE birthDate IS NULL OR TRIM(birthDate) = ''
  `).run();
}

// 3) –¢–∞–±–ª–∏—Ü–∞ conflicts
db.prepare(`
  CREATE TABLE IF NOT EXISTS conflicts (
    region TEXT PRIMARY KEY,
    text   TEXT
  )
`).run();

// –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–∞–º–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
function getConflictText(region) {
  const row = db.prepare(
      `SELECT text FROM conflicts WHERE region = ?`
  ).get(region);
  return row ? row.text : "";
}

function saveConflictText(region, text) {
  db.prepare(
      `INSERT INTO conflicts (region, text)
     VALUES (?, ?)
     ON CONFLICT(region) DO UPDATE SET text = excluded.text`
  ).run(region, text);
}

module.exports = {
  db,
  getConflictText,
  saveConflictText,
  photosDir, // —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ preload.js
};
